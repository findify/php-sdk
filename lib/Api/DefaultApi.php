<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Findify API
 *
 * Findify Search, Recommendations and Smart Collection API
 *
 * OpenAPI spec version: 3.11.0
 * Contact: yourfriends@findify.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api-v3.findify.io/v3');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation autocompletePost
     *
     * 
     *
     * @param \Swagger\Client\Model\AutocompleteRequest $autocomplete Request parameters for autocomplete (required)
     * @return \Swagger\Client\Model\AutocompleteResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function autocompletePost($autocomplete)
    {
        list($response) = $this->autocompletePostWithHttpInfo($autocomplete);
        return $response;
    }

    /**
     * Operation autocompletePostWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\AutocompleteRequest $autocomplete Request parameters for autocomplete (required)
     * @return Array of \Swagger\Client\Model\AutocompleteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function autocompletePostWithHttpInfo($autocomplete)
    {
        // verify the required parameter 'autocomplete' is set
        if ($autocomplete === null) {
            throw new \InvalidArgumentException('Missing the required parameter $autocomplete when calling autocompletePost');
        }
        // parse inputs
        $resourcePath = "/autocomplete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($autocomplete)) {
            $_tempBody = $autocomplete;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AutocompleteResponse',
                '/autocomplete'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AutocompleteResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AutocompleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation feedbackPost
     *
     * 
     *
     * @param \Swagger\Client\Model\Feedback $feedback Feedback query (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function feedbackPost($feedback)
    {
        list($response) = $this->feedbackPostWithHttpInfo($feedback);
        return $response;
    }

    /**
     * Operation feedbackPostWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\Feedback $feedback Feedback query (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function feedbackPostWithHttpInfo($feedback)
    {
        // verify the required parameter 'feedback' is set
        if ($feedback === null) {
            throw new \InvalidArgumentException('Missing the required parameter $feedback when calling feedbackPost');
        }
        // parse inputs
        $resourcePath = "/feedback";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($feedback)) {
            $_tempBody = $feedback;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/feedback'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recommendItemsFeaturedPost
     *
     * 
     *
     * @param \Swagger\Client\Model\FeaturedRecommendationRequest $recommendation Recommendation query (required)
     * @return \Swagger\Client\Model\GenericRecommendationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsFeaturedPost($recommendation)
    {
        list($response) = $this->recommendItemsFeaturedPostWithHttpInfo($recommendation);
        return $response;
    }

    /**
     * Operation recommendItemsFeaturedPostWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\FeaturedRecommendationRequest $recommendation Recommendation query (required)
     * @return Array of \Swagger\Client\Model\GenericRecommendationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsFeaturedPostWithHttpInfo($recommendation)
    {
        // verify the required parameter 'recommendation' is set
        if ($recommendation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recommendation when calling recommendItemsFeaturedPost');
        }
        // parse inputs
        $resourcePath = "/recommend/items/featured";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($recommendation)) {
            $_tempBody = $recommendation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GenericRecommendationResponse',
                '/recommend/items/featured'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GenericRecommendationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GenericRecommendationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recommendItemsItemIdViewedViewedPost
     *
     * 
     *
     * @param string $item_id  (required)
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return \Swagger\Client\Model\GenericRecommendationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsItemIdViewedViewedPost($item_id, $recommendation)
    {
        list($response) = $this->recommendItemsItemIdViewedViewedPostWithHttpInfo($item_id, $recommendation);
        return $response;
    }

    /**
     * Operation recommendItemsItemIdViewedViewedPostWithHttpInfo
     *
     * 
     *
     * @param string $item_id  (required)
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return Array of \Swagger\Client\Model\GenericRecommendationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsItemIdViewedViewedPostWithHttpInfo($item_id, $recommendation)
    {
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling recommendItemsItemIdViewedViewedPost');
        }
        // verify the required parameter 'recommendation' is set
        if ($recommendation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recommendation when calling recommendItemsItemIdViewedViewedPost');
        }
        // parse inputs
        $resourcePath = "/recommend/items/{item_id}/viewed/viewed";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($recommendation)) {
            $_tempBody = $recommendation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GenericRecommendationResponse',
                '/recommend/items/{item_id}/viewed/viewed'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GenericRecommendationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GenericRecommendationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recommendItemsItemIdsBoughtBoughtPost
     *
     * 
     *
     * @param string $item_ids  (required)
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return \Swagger\Client\Model\GenericRecommendationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsItemIdsBoughtBoughtPost($item_ids, $recommendation)
    {
        list($response) = $this->recommendItemsItemIdsBoughtBoughtPostWithHttpInfo($item_ids, $recommendation);
        return $response;
    }

    /**
     * Operation recommendItemsItemIdsBoughtBoughtPostWithHttpInfo
     *
     * 
     *
     * @param string $item_ids  (required)
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return Array of \Swagger\Client\Model\GenericRecommendationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsItemIdsBoughtBoughtPostWithHttpInfo($item_ids, $recommendation)
    {
        // verify the required parameter 'item_ids' is set
        if ($item_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_ids when calling recommendItemsItemIdsBoughtBoughtPost');
        }
        // verify the required parameter 'recommendation' is set
        if ($recommendation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recommendation when calling recommendItemsItemIdsBoughtBoughtPost');
        }
        // parse inputs
        $resourcePath = "/recommend/items/{item_ids}/bought/bought";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($item_ids !== null) {
            $resourcePath = str_replace(
                "{" . "item_ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_ids),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($recommendation)) {
            $_tempBody = $recommendation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GenericRecommendationResponse',
                '/recommend/items/{item_ids}/bought/bought'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GenericRecommendationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GenericRecommendationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recommendItemsNewestPost
     *
     * 
     *
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return \Swagger\Client\Model\GenericRecommendationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsNewestPost($recommendation)
    {
        list($response) = $this->recommendItemsNewestPostWithHttpInfo($recommendation);
        return $response;
    }

    /**
     * Operation recommendItemsNewestPostWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return Array of \Swagger\Client\Model\GenericRecommendationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsNewestPostWithHttpInfo($recommendation)
    {
        // verify the required parameter 'recommendation' is set
        if ($recommendation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recommendation when calling recommendItemsNewestPost');
        }
        // parse inputs
        $resourcePath = "/recommend/items/newest";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($recommendation)) {
            $_tempBody = $recommendation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GenericRecommendationResponse',
                '/recommend/items/newest'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GenericRecommendationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GenericRecommendationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recommendItemsTrendingPost
     *
     * 
     *
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return \Swagger\Client\Model\GenericRecommendationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsTrendingPost($recommendation)
    {
        list($response) = $this->recommendItemsTrendingPostWithHttpInfo($recommendation);
        return $response;
    }

    /**
     * Operation recommendItemsTrendingPostWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return Array of \Swagger\Client\Model\GenericRecommendationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsTrendingPostWithHttpInfo($recommendation)
    {
        // verify the required parameter 'recommendation' is set
        if ($recommendation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recommendation when calling recommendItemsTrendingPost');
        }
        // parse inputs
        $resourcePath = "/recommend/items/trending";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($recommendation)) {
            $_tempBody = $recommendation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GenericRecommendationResponse',
                '/recommend/items/trending'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GenericRecommendationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GenericRecommendationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recommendItemsViewedLatestPost
     *
     * 
     *
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return \Swagger\Client\Model\GenericRecommendationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsViewedLatestPost($recommendation)
    {
        list($response) = $this->recommendItemsViewedLatestPostWithHttpInfo($recommendation);
        return $response;
    }

    /**
     * Operation recommendItemsViewedLatestPostWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\RecommendationRequest $recommendation Recommendation query (required)
     * @return Array of \Swagger\Client\Model\GenericRecommendationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendItemsViewedLatestPostWithHttpInfo($recommendation)
    {
        // verify the required parameter 'recommendation' is set
        if ($recommendation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recommendation when calling recommendItemsViewedLatestPost');
        }
        // parse inputs
        $resourcePath = "/recommend/items/viewed/latest";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($recommendation)) {
            $_tempBody = $recommendation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GenericRecommendationResponse',
                '/recommend/items/viewed/latest'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GenericRecommendationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GenericRecommendationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recommendSlotPost
     *
     * 
     *
     * @param string $slot  (required)
     * @param \Swagger\Client\Model\GenericRecommendationRequest $recommendation Recommendation query (required)
     * @return \Swagger\Client\Model\GenericRecommendationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendSlotPost($slot, $recommendation)
    {
        list($response) = $this->recommendSlotPostWithHttpInfo($slot, $recommendation);
        return $response;
    }

    /**
     * Operation recommendSlotPostWithHttpInfo
     *
     * 
     *
     * @param string $slot  (required)
     * @param \Swagger\Client\Model\GenericRecommendationRequest $recommendation Recommendation query (required)
     * @return Array of \Swagger\Client\Model\GenericRecommendationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function recommendSlotPostWithHttpInfo($slot, $recommendation)
    {
        // verify the required parameter 'slot' is set
        if ($slot === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slot when calling recommendSlotPost');
        }
        // verify the required parameter 'recommendation' is set
        if ($recommendation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recommendation when calling recommendSlotPost');
        }
        // parse inputs
        $resourcePath = "/recommend/{slot}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($slot !== null) {
            $resourcePath = str_replace(
                "{" . "slot" . "}",
                $this->apiClient->getSerializer()->toPathValue($slot),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($recommendation)) {
            $_tempBody = $recommendation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GenericRecommendationResponse',
                '/recommend/{slot}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GenericRecommendationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GenericRecommendationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchPost
     *
     * 
     *
     * @param \Swagger\Client\Model\SearchRequest $search Search query (required)
     * @return \Swagger\Client\Model\SearchResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function searchPost($search)
    {
        list($response) = $this->searchPostWithHttpInfo($search);
        return $response;
    }

    /**
     * Operation searchPostWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\SearchRequest $search Search query (required)
     * @return Array of \Swagger\Client\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function searchPostWithHttpInfo($search)
    {
        // verify the required parameter 'search' is set
        if ($search === null) {
            throw new \InvalidArgumentException('Missing the required parameter $search when calling searchPost');
        }
        // parse inputs
        $resourcePath = "/search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($search)) {
            $_tempBody = $search;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SearchResponse',
                '/search'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation smartCollectionSlotPost
     *
     * 
     *
     * @param string $slot  (required)
     * @param \Swagger\Client\Model\CollectionRequest $collection Smart collection query (required)
     * @return \Swagger\Client\Model\CollectionResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function smartCollectionSlotPost($slot, $collection)
    {
        list($response) = $this->smartCollectionSlotPostWithHttpInfo($slot, $collection);
        return $response;
    }

    /**
     * Operation smartCollectionSlotPostWithHttpInfo
     *
     * 
     *
     * @param string $slot  (required)
     * @param \Swagger\Client\Model\CollectionRequest $collection Smart collection query (required)
     * @return Array of \Swagger\Client\Model\CollectionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function smartCollectionSlotPostWithHttpInfo($slot, $collection)
    {
        // verify the required parameter 'slot' is set
        if ($slot === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slot when calling smartCollectionSlotPost');
        }
        // verify the required parameter 'collection' is set
        if ($collection === null) {
            throw new \InvalidArgumentException('Missing the required parameter $collection when calling smartCollectionSlotPost');
        }
        // parse inputs
        $resourcePath = "/smart-collection/{slot}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($slot !== null) {
            $resourcePath = str_replace(
                "{" . "slot" . "}",
                $this->apiClient->getSerializer()->toPathValue($slot),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($collection)) {
            $_tempBody = $collection;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CollectionResponse',
                '/smart-collection/{slot}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CollectionResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CollectionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
